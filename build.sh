#!/bin/bash

# Script de build optimis√© pour Netlify avec gestion Rollup
echo "üöÄ D√©marrage du build..."

# V√©rification de la version Node.js
echo "üìã Version Node.js: $(node --version)"
echo "üìã Version npm: $(npm --version)"

# Nettoyage des caches
echo "üßπ Nettoyage des caches..."
npm cache clean --force

# Suppression des modules existants
echo "üóëÔ∏è Suppression des node_modules..."
rm -rf node_modules

# Suppression du package-lock.json pour une installation propre
echo "üóëÔ∏è Suppression du package-lock.json..."
rm -f package-lock.json

# Installation des d√©pendances avec gestion d'erreurs
echo "üì¶ Installation des d√©pendances..."
if npm install --legacy-peer-deps --no-optional --production=false; then
    echo "‚úÖ D√©pendances install√©es avec succ√®s"
else
    echo "‚ùå Erreur lors de l'installation des d√©pendances"
    echo "üîß Tentative d'installation avec --force..."
    if npm install --legacy-peer-deps --force; then
        echo "‚úÖ D√©pendances install√©es avec --force"
    else
        echo "‚ùå √âchec de l'installation des d√©pendances"
        exit 1
    fi
fi

# Installation sp√©cifique de la d√©pendance Rollup manquante
echo "üîß Installation sp√©cifique de @rollup/rollup-linux-x64-gnu..."
if npm install @rollup/rollup-linux-x64-gnu@^4.9.0 --legacy-peer-deps --force; then
    echo "‚úÖ @rollup/rollup-linux-x64-gnu install√© avec succ√®s"
else
    echo "‚ö†Ô∏è Impossible d'installer @rollup/rollup-linux-x64-gnu, tentative de build sans..."
fi

# V√©rification des d√©pendances
echo "üîç V√©rification des d√©pendances..."
npm ls --depth=0 || echo "‚ö†Ô∏è Certaines d√©pendances peuvent avoir des avertissements"

# V√©rification des d√©pendances critiques
echo "üîç V√©rification des d√©pendances critiques..."
CRITICAL_DEPS=("react" "react-dom" "vite")
for dep in "${CRITICAL_DEPS[@]}"; do
    if npm ls "$dep" >/dev/null 2>&1; then
        echo "‚úÖ $dep install√©"
    else
        echo "‚ùå $dep manquant - tentative d'installation..."
        npm install "$dep" --legacy-peer-deps
    fi
done

# V√©rification sp√©cifique de Rollup
echo "üîç V√©rification de Rollup..."
if npm ls rollup >/dev/null 2>&1; then
    echo "‚úÖ Rollup install√©"
    # V√©rification des d√©pendances natives
    if [ -d "node_modules/@rollup" ]; then
        echo "‚úÖ Dossier @rollup pr√©sent"
        ls -la node_modules/@rollup/ || echo "‚ö†Ô∏è Impossible de lister @rollup"
    else
        echo "‚ö†Ô∏è Dossier @rollup manquant"
    fi
else
    echo "‚ùå Rollup manquant - tentative d'installation..."
    npm install rollup@^4.9.0 --legacy-peer-deps
fi

# Build du projet avec configuration principale
echo "üî® Build du projet avec configuration principale..."
if npm run build; then
    echo "‚úÖ Build r√©ussi !"
else
    echo "‚ùå Build √©chou√© - tentative de build avec Vite directement..."
    if npx vite build; then
        echo "‚úÖ Build Vite direct r√©ussi !"
    else
        echo "‚ùå √âchec du build Vite direct"
        echo "üîß Tentative de build avec configuration Vite simple..."
        
        # Utilisation de la configuration Vite simple
        if npx vite build --config vite.simple.config.ts; then
            echo "‚úÖ Build avec configuration simple r√©ussi !"
        else
            echo "‚ùå √âchec du build avec configuration simple"
            echo "üîß Tentative de build avec configuration minimale..."
            
            # Cr√©ation d'une configuration Vite minimale
            cat > vite.minimal.config.ts << 'EOF'
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    target: 'es2020',
    minify: 'esbuild'
  }
})
EOF
            
            if npx vite build --config vite.minimal.config.ts; then
                echo "‚úÖ Build avec configuration minimale r√©ussi !"
            else
                echo "‚ùå √âchec du build avec configuration minimale"
                exit 1
            fi
        fi
    fi
fi

# V√©rification du build
if [ -d "dist" ]; then
    echo "‚úÖ Build r√©ussi !"
    echo "üìÅ Contenu du dossier dist:"
    ls -la dist/
    
    # V√©rification des fichiers critiques
    if [ -f "dist/index.html" ]; then
        echo "‚úÖ index.html g√©n√©r√©"
    else
        echo "‚ùå index.html manquant"
        exit 1
    fi
    
    if [ -d "dist/assets" ]; then
        echo "‚úÖ Dossier assets g√©n√©r√©"
        echo "üìÅ Contenu des assets:"
        ls -la dist/assets/
    else
        echo "‚ùå Dossier assets manquant"
        exit 1
    fi
else
    echo "‚ùå Build √©chou√© !"
    exit 1
fi

echo "üéâ Build termin√© avec succ√®s !"
echo "üìä R√©sum√© du build:"
echo "   - Node.js: $(node --version)"
echo "   - npm: $(npm --version)"
echo "   - Dossier dist: $(du -sh dist 2>/dev/null || echo 'N/A')"
echo "   - Fichiers g√©n√©r√©s: $(find dist -type f | wc -l)"
echo "   - Rollup: $(npm ls rollup 2>/dev/null | head -1 || echo 'Non install√©')"
echo "   - Configuration utilis√©e: $(if [ -f "vite.simple.config.ts" ] && [ -f "vite.minimal.config.ts" ]; then echo "Configuration minimale"; elif [ -f "vite.simple.config.ts" ]; then echo "Configuration simple"; else echo "Configuration principale"; fi)"
