import React, { useState, useMemo, useEffect } from 'react';
import { RaceEvent, AppState, EventBudgetItem, EventRaceDocument, BudgetItemCategory, EventTransportLeg, EventAccommodation, StaffMember, StaffStatus, User, AppSection, PermissionLevel } from '../../types';
import { saveData } from '../../services/firebaseService';
import ActionButton from '../../components/ActionButton';
import Modal from '../../components/Modal';
import PlusCircleIcon from '../../components/icons/PlusCircleIcon';
import PencilIcon from '../../components/icons/PencilIcon';
import TrashIcon from '../../components/icons/TrashIcon';
import InformationCircleIcon from '../../components/icons/InformationCircleIcon';

interface EventBudgetTabProps {
  event: RaceEvent;
  eventId: string;
  appState: AppState;
  setEventBudgetItems: React.Dispatch<React.SetStateAction<EventBudgetItem[]>>;
  currentUser?: User | null;
  effectivePermissions?: Partial<Record<AppSection, PermissionLevel[]>>;
}

const initialBudgetFormStateFactory = (eventId: string): Omit<EventBudgetItem, 'id'> => ({
  eventId: eventId,
  category: BudgetItemCategory.FRAIS_DIVERS,
  description: '',
  estimatedCost: 0,
  actualCost: undefined,
  notes: '',
  proofDocumentId: undefined,
});

export default function EventBudgetTab({ 
  event, 
  eventId, 
  appState, 
  setEventBudgetItems,
  currentUser,
  effectivePermissions
}: EventBudgetTabProps): JSX.Element {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentItem, setCurrentItem] = useState<Omit<EventBudgetItem, 'id'> | EventBudgetItem>(initialBudgetFormStateFactory(eventId));
  const [isEditing, setIsEditing] = useState(false);

  // Vérification des permissions pour l'accès aux informations financières
  const canViewFinancialInfo = effectivePermissions?.financial?.includes('view') || false;

  // Fonction pour calculer automatiquement les budgets des hébergements
  const calculateAccommodationBudgetItems = (): EventBudgetItem[] => {
    const accommodations = appState.eventAccommodations.filter(acc => acc.eventId === eventId);
    return accommodations
      .filter(acc => acc.estimatedCost && acc.estimatedCost > 0)
      .map(acc => ({
        id: `auto-acco-${acc.id}`,
        eventId: eventId,
        category: BudgetItemCategory.HEBERGEMENT,
        description: `Hébergement: ${acc.hotelName || 'Hôtel sans nom'}`,
        estimatedCost: acc.estimatedCost,
        isAutoGenerated: true,
        notes: `Hébergement: ${acc.hotelName || 'Hôtel sans nom'}`,
      }));
  };

  // Fonction pour calculer automatiquement les budgets des vacataires
  const calculateVacataireBudgetItems = (): EventBudgetItem[] => {
    const budgetItems: EventBudgetItem[] = [];
    
    // Récupérer l'événement pour connaître ses dates
    const event = appState.raceEvents.find(e => e.id === eventId);
    if (!event) return budgetItems;
    
    // Récupérer tous les déplacements pour cet événement
    const transportLegsForEvent = appState.eventTransportLegs.filter(leg => leg.eventId === eventId);
    
    // Calculer la durée de l'événement
    const startDate = new Date(event.date + 'T00:00:00Z');
    const endDate = new Date((event.endDate || event.date) + 'T23:59:59Z');
    const eventDurationDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;
    
    // Map pour éviter les doublons
    const vacataireCosts = new Map<string, { 
      totalCost: number; 
      description: string; 
      notes: string; 
      source: 'event' | 'transport' | 'both' 
    }>();
    
    // 1. Calculer le coût des vacataires assignés directement à l'événement
    if (event.selectedStaffIds) {
      event.selectedStaffIds.forEach(staffId => {
        const staffMember = appState.staff.find(s => s.id === staffId);
        if (!staffMember || staffMember.status !== StaffStatus.VACATAIRE || !staffMember.dailyRate) return;
        
        const totalCost = staffMember.dailyRate * eventDurationDays;
        const description = `Vacataire ${staffMember.firstName} ${staffMember.lastName} - Événement (${eventDurationDays} jour${eventDurationDays > 1 ? 's' : ''})`;
        const notes = `Tarif journalier: ${staffMember.dailyRate}€/jour\nPériode: ${startDate.toLocaleDateString('fr-FR')} au ${endDate.toLocaleDateString('fr-FR')}\nCalcul: ${staffMember.dailyRate}€ × ${eventDurationDays} jour${eventDurationDays > 1 ? 's' : ''} = ${totalCost}€`;
        
        vacataireCosts.set(staffId, {
          totalCost,
          description,
          notes,
          source: 'event'
        });
      });
    }
    
    // 2. Calculer le coût des vacataires assignés aux déplacements
    transportLegsForEvent.forEach(leg => {
      if (!leg.occupants) return;
      
      leg.occupants.forEach(occupant => {
        if (occupant.type !== 'staff') return;
        
        const staffMember = appState.staff.find(s => s.id === occupant.id);
        if (!staffMember || staffMember.status !== StaffStatus.VACATAIRE || !staffMember.dailyRate) return;
        
        // Calculer la durée du déplacement
        let transportDurationDays = 1;
        if (leg.departureDate && leg.arrivalDate) {
          const depDate = new Date(leg.departureDate + 'T12:00:00Z');
          const arrDate = new Date(leg.arrivalDate + 'T12:00:00Z');
          transportDurationDays = Math.max(1, Math.ceil((arrDate.getTime() - depDate.getTime()) / (1000 * 60 * 60 * 24)) + 1);
        }
        
        const transportCost = staffMember.dailyRate * transportDurationDays;
        const transportDescription = `Vacataire ${staffMember.firstName} ${staffMember.lastName} - Transport ${leg.direction} (${transportDurationDays} jour${transportDurationDays > 1 ? 's' : ''})`;
        const transportNotes = `Tarif journalier: ${staffMember.dailyRate}€/jour\nTransport: ${leg.direction}\nDépart: ${leg.departureDate ? new Date(leg.departureDate).toLocaleDateString('fr-FR') : 'N/A'}\nArrivée: ${leg.arrivalDate ? new Date(leg.arrivalDate).toLocaleDateString('fr-FR') : 'N/A'}\nCalcul: ${staffMember.dailyRate}€ × ${transportDurationDays} jour${transportDurationDays > 1 ? 's' : ''} = ${transportCost}€`;
        
        if (vacataireCosts.has(occupant.id)) {
          // Le vacataire est déjà assigné à l'événement, ajouter le coût du transport
          const existing = vacataireCosts.get(occupant.id)!;
          const totalCost = existing.totalCost + transportCost;
          const combinedDescription = `${existing.description} + Transport ${leg.direction}`;
          const combinedNotes = `${existing.notes}\n\nTransport ${leg.direction}:\n${transportNotes}`;
          
          vacataireCosts.set(occupant.id, {
            totalCost,
            description: combinedDescription,
            notes: combinedNotes,
            source: 'both'
          });
        } else {
          // Le vacataire n'est assigné qu'au transport
          vacataireCosts.set(occupant.id, {
            totalCost: transportCost,
            description: transportDescription,
            notes: transportNotes,
            source: 'transport'
          });
        }
      });
    });
    
    // 3. Créer les éléments de budget
    vacataireCosts.forEach((data, staffId) => {
      const budgetItem: EventBudgetItem = {
        id: `auto-vacataire-${staffId}-${eventId}`,
        eventId: eventId,
        category: BudgetItemCategory.SALAIRES,
        description: data.description,
        estimatedCost: data.totalCost,
        actualCost: undefined,
        notes: data.notes,
        isAutoGenerated: true,
      };
      
      budgetItems.push(budgetItem);
    });
    
    return budgetItems;
  };

  // Fonction pour calculer automatiquement les budgets des véhicules
  const calculateVehicleBudgetItems = (): EventBudgetItem[] => {
    const budgetItems: EventBudgetItem[] = [];
    const transportLegsForEvent = appState.eventTransportLegs.filter(leg => leg.eventId === eventId);
    
    transportLegsForEvent.forEach((leg) => {
      const vehicle = leg.assignedVehicleId
        ? appState.vehicles.find((v) => v.id === leg.assignedVehicleId)
        : undefined;
      if (
        vehicle?.estimatedDailyCost &&
        vehicle.estimatedDailyCost > 0 &&
        leg.departureDate
      ) {
        const startDate = new Date(leg.departureDate + "T12:00:00Z");
        const endDate = leg.arrivalDate
          ? new Date(leg.arrivalDate + "T12:00:00Z")
          : startDate;
        const durationInDays = Math.max(
          1,
          Math.round(
            (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)
          ) + 1
        );
        const totalCost = vehicle.estimatedDailyCost * durationInDays;

        budgetItems.push({
          id: `auto-vehicle-${leg.id}`,
          eventId: eventId,
          category: BudgetItemCategory.VOITURE_EQUIPE,
          description: `Coût estimé: ${vehicle.name}`,
          estimatedCost: totalCost,
          notes: `Véhicule: ${vehicle.name}\nDurée: ${durationInDays} jour${durationInDays > 1 ? 's' : ''}\nCalcul: ${vehicle.estimatedDailyCost}€ × ${durationInDays} jour${durationInDays > 1 ? 's' : ''} = ${totalCost}€`,
          isAutoGenerated: true,
          sourceVehicleId: vehicle.id,
        });
      }
    });
    return budgetItems;
  };

  // Recalculer automatiquement les budgets à chaque ouverture de l'onglet
  useEffect(() => {
    const accommodationItems = calculateAccommodationBudgetItems();
    const vacataireItems = calculateVacataireBudgetItems();
    const vehicleItems = calculateVehicleBudgetItems();
    
    // Mettre à jour les éléments de budget automatiques
    setEventBudgetItems((prevBudget) => {
      // Supprimer les anciens éléments auto-générés pour cet événement
      const manualItems = prevBudget.filter(
        (item) => item.eventId === eventId && !item.isAutoGenerated
      );
      const otherEventsItems = prevBudget.filter(
        (item) => item.eventId !== eventId
      );
      
      // Récupérer les coûts réels existants pour les préserver
      const existingActualCosts = new Map<string, number>();
      prevBudget
        .filter(item => item.eventId === eventId && item.isAutoGenerated)
        .forEach(item => {
          if (item.actualCost !== undefined) {
            existingActualCosts.set(item.id, item.actualCost);
          }
        });
      
      // Ajouter les nouveaux éléments auto-générés en préservant les coûts réels
      const newAutoItems = [...accommodationItems, ...vacataireItems, ...vehicleItems].map(item => ({
        ...item,
        actualCost: existingActualCosts.get(item.id) || item.actualCost
      }));
      
      return [
        ...otherEventsItems,
        ...manualItems,
        ...newAutoItems,
      ];
    });
  }, [eventId, appState.eventAccommodations, appState.eventTransportLegs, appState.staff, appState.vehicles, appState.raceEvents, setEventBudgetItems]);

  const budgetItemsForEvent = useMemo(() => {
    return appState.eventBudgetItems.filter(item => item.eventId === eventId);
  }, [appState.eventBudgetItems, eventId]);

  const documentsForEvent = useMemo(() => {
    return appState.eventDocuments.filter(doc => doc.eventId === eventId);
  }, [appState.eventDocuments, eventId]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    setCurrentItem(prev => ({ 
      ...prev, 
      [name]: type === 'number' ? parseFloat(value) || (name === 'actualCost' && value === '' ? undefined : 0) : value 
    }));
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    let finalItemInput = {...currentItem};
    if (finalItemInput.actualCost === undefined || isNaN(Number(finalItemInput.actualCost)) || String(finalItemInput.actualCost).trim() === '') {
        finalItemInput.actualCost = undefined;
    } else {
        finalItemInput.actualCost = Number(finalItemInput.actualCost);
    }
    
    const itemToSave: EventBudgetItem = {
        ...(finalItemInput as Omit<EventBudgetItem, 'id'>),
        eventId: eventId,
        id: (finalItemInput as EventBudgetItem).id || Date.now().toString() + Math.random().toString(36).substring(2,9),
    };

    // Sauvegarder dans Firebase si on a un teamId
    if (appState.activeTeamId) {
      try {
        await saveData(
          appState.activeTeamId,
          "eventBudgetItems",
          itemToSave
        );
        console.log('✅ Élément de budget sauvegardé dans Firebase');
      } catch (error) {
        console.error('❌ Erreur lors de la sauvegarde de l\'élément de budget:', error);
        alert('Erreur lors de la sauvegarde. Veuillez réessayer.');
        return;
      }
    }

    setEventBudgetItems(prevEventItems => {
      if (isEditing) {
        return prevEventItems.map(item => item.id === itemToSave.id ? itemToSave : item);
      } else {
        return [...prevEventItems, itemToSave];
      }
    });
    
    setIsModalOpen(false);
  };

  const openAddModal = () => {
    setCurrentItem(initialBudgetFormStateFactory(eventId));
    setIsEditing(false);
    setIsModalOpen(true);
  };

  const openEditModal = (item: EventBudgetItem) => {
    setCurrentItem(item);
    setIsEditing(true);
    setIsModalOpen(true);
  };

  const handleDelete = (itemId: string) => {
    if (window.confirm("Êtes-vous sûr de vouloir supprimer cet élément du budget ?")) {
      setEventBudgetItems(prevEventItems => prevEventItems.filter(item => item.id !== itemId));
    }
  };
  
  const totalEstimated = budgetItemsForEvent.reduce((sum, item) => sum + item.estimatedCost, 0);
  const totalActual = budgetItemsForEvent.reduce((sum, item) => sum + (item.actualCost || 0), 0);

  // Calculs sectorisés pour l'analyse des sources de dépenses
  const budgetAnalysis = useMemo(() => {
    const categoryTotals = Object.values(BudgetItemCategory).map(category => {
      const items = budgetItemsForEvent.filter(item => item.category === category);
      const estimated = items.reduce((sum, item) => sum + item.estimatedCost, 0);
      const actual = items.reduce((sum, item) => sum + (item.actualCost || 0), 0);
      const percentage = totalEstimated > 0 ? (estimated / totalEstimated) * 100 : 0;
      
      return {
        category,
        estimated,
        actual,
        percentage,
        itemCount: items.length,
        items
      };
    }).filter(cat => cat.estimated > 0 || cat.actual > 0);

    // Trier par montant estimé décroissant
    categoryTotals.sort((a, b) => b.estimated - a.estimated);

    return {
      categoryTotals,
      totalEstimated,
      totalActual,
      variance: totalActual > 0 ? totalActual - totalEstimated : 0,
      variancePercentage: totalEstimated > 0 ? ((totalActual - totalEstimated) / totalEstimated) * 100 : 0
    };
  }, [budgetItemsForEvent, totalEstimated, totalActual]);

  // Si l'utilisateur n'a pas accès aux informations financières, afficher un message
  if (!canViewFinancialInfo) {
    return (
      <div className="text-center py-12">
        <div className="text-6xl mb-4">🔒</div>
        <h3 className="text-xl font-semibold text-gray-700 mb-2">Accès restreint</h3>
        <p className="text-gray-500">
          Vous n'avez pas accès aux informations budgétaires de cet événement.
        </p>
      </div>
    );
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <div>
          <h3 className="text-xl font-semibold text-gray-700">Budget pour {event.name}</h3>
          <p className="text-sm text-gray-500 mt-1">
            Les éléments marqués <span className="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">Auto</span> 
            sont calculés automatiquement depuis les autres onglets (Hébergement, Transport, Staff)
          </p>
        </div>
        <ActionButton onClick={openAddModal} icon={<PlusCircleIcon className="w-5 h-5"/>}>
          Ajouter Ligne
        </ActionButton>
      </div>

      {/* Analyse sectorisée du budget */}
      {budgetItemsForEvent.length > 0 && (
        <div className="mb-8 bg-gray-50 rounded-lg p-6">
          <h4 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
            <span className="mr-2">📊</span>
            Analyse Sectorisée du Budget
          </h4>
          
          {/* Résumé global */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div className="bg-white p-4 rounded-lg border">
              <div className="text-sm text-gray-600">Budget Estimé</div>
              <div className="text-2xl font-bold text-blue-600">{budgetAnalysis.totalEstimated.toFixed(2)} €</div>
            </div>
            <div className="bg-white p-4 rounded-lg border">
              <div className="text-sm text-gray-600">Budget Réel</div>
              <div className="text-2xl font-bold text-green-600">
                {budgetAnalysis.totalActual > 0 ? `${budgetAnalysis.totalActual.toFixed(2)} €` : 'N/A'}
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg border">
              <div className="text-sm text-gray-600">Écart</div>
              <div className={`text-2xl font-bold ${budgetAnalysis.variance >= 0 ? 'text-red-600' : 'text-green-600'}`}>
                {budgetAnalysis.variance !== 0 ? `${budgetAnalysis.variance.toFixed(2)} €` : '0 €'}
                {budgetAnalysis.variancePercentage !== 0 && (
                  <span className="text-sm ml-2">
                    ({budgetAnalysis.variancePercentage > 0 ? '+' : ''}{budgetAnalysis.variancePercentage.toFixed(1)}%)
                  </span>
                )}
              </div>
            </div>
          </div>

          {/* Répartition par catégorie */}
          <div className="space-y-3">
            <div className="flex justify-between items-center mb-3">
              <h5 className="text-md font-medium text-gray-700">Répartition par Catégorie</h5>
              {budgetAnalysis.variance !== 0 && (
                <div className={`text-sm px-3 py-1 rounded-full ${
                  budgetAnalysis.variance > 0 
                    ? 'bg-red-100 text-red-800' 
                    : 'bg-green-100 text-green-800'
                }`}>
                  {budgetAnalysis.variance > 0 ? '⚠️' : '✅'} 
                  Écart: {budgetAnalysis.variance > 0 ? '+' : ''}{budgetAnalysis.variance.toFixed(2)}€ 
                  ({budgetAnalysis.variancePercentage > 0 ? '+' : ''}{budgetAnalysis.variancePercentage.toFixed(1)}%)
                </div>
              )}
            </div>
            {budgetAnalysis.categoryTotals.map((categoryData) => (
              <div key={categoryData.category} className="bg-white p-4 rounded-lg border">
                <div className="flex justify-between items-start mb-2">
                  <div className="flex-1">
                    <div className="flex items-center justify-between">
                      <h6 className="font-medium text-gray-800">{categoryData.category}</h6>
                      <div className="text-sm text-gray-500">
                        {categoryData.itemCount} élément{categoryData.itemCount > 1 ? 's' : ''}
                      </div>
                    </div>
                    <div className="text-sm text-gray-600">
                      {categoryData.percentage.toFixed(1)}% du budget total
                    </div>
                  </div>
                  <div className="text-right ml-4">
                    <div className="text-lg font-semibold text-gray-800">
                      {categoryData.estimated.toFixed(2)} €
                    </div>
                    {categoryData.actual > 0 && (
                      <div className="text-sm text-gray-600">
                        Réel: {categoryData.actual.toFixed(2)} €
                      </div>
                    )}
                    {categoryData.actual > 0 && categoryData.actual !== categoryData.estimated && (
                      <div className={`text-xs font-medium ${
                        categoryData.actual > categoryData.estimated 
                          ? 'text-red-600' 
                          : 'text-green-600'
                      }`}>
                        Écart: {categoryData.actual > categoryData.estimated ? '+' : ''}{(categoryData.actual - categoryData.estimated).toFixed(2)}€
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Barre de progression */}
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${Math.min(categoryData.percentage, 100)}%` }}
                  ></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {budgetItemsForEvent.length === 0 ? (
        <p className="text-gray-500 italic">Aucune ligne budgétaire ajoutée pour cet événement.</p>
      ) : (
        <div className="overflow-x-auto mb-6">
          <table className="min-w-full bg-white text-sm">
            <thead className="bg-gray-100">
              <tr>
                <th className="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Catégorie</th>
                <th className="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                <th className="py-2 px-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Estimé (€)</th>
                <th className="py-2 px-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Réel (€)</th>
                <th className="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Notes</th>
                <th className="py-2 px-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Justificatif</th>
                <th className="py-2 px-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {budgetItemsForEvent.map((item) => (
                <tr key={item.id} className={`hover:bg-gray-50 transition-colors ${item.isAutoGenerated ? 'bg-blue-50' : ''}`}>
                  <td className="py-3 px-3 whitespace-nowrap text-gray-700">
                    <div className="flex items-center">
                      {item.category}
                      {item.isAutoGenerated && (
                        <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          Auto
                        </span>
                      )}
                    </div>
                  </td>
                  <td className="py-3 px-3 whitespace-nowrap font-medium text-gray-800">
                    <div className="flex items-center">
                      {item.description}
                      {item.isAutoGenerated && (
                        <span className="ml-2 text-blue-500">🤖</span>
                      )}
                    </div>
                  </td>
                  <td className="py-3 px-3 whitespace-nowrap text-gray-700 text-right">{item.estimatedCost.toFixed(2)}</td>
                  <td className="py-3 px-3 whitespace-nowrap text-gray-700 text-right">{item.actualCost !== undefined ? item.actualCost.toFixed(2) : '-'}</td>
                  <td className="py-3 px-3 text-gray-700 max-w-xs truncate" title={item.notes || ''}>
                    {item.notes && item.notes.length > 25 && <InformationCircleIcon className="w-4 h-4 inline mr-1 text-blue-500" />}
                    {item.notes}
                  </td>
                  <td className="py-3 px-3 whitespace-nowrap text-xs">
                    {item.proofDocumentId ? (
                        (() => {
                            const doc = documentsForEvent.find(d => d.id === item.proofDocumentId);
                            return doc ? (
                                <a href={doc.fileLinkOrPath} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                                    {doc.name}
                                </a>
                            ) : (
                                <span className="text-red-500 italic">Document non trouvé</span>
                            );
                        })()
                    ) : (
                        '-'
                    )}
                  </td>
                  <td className="py-3 px-3 whitespace-nowrap text-right space-x-1">
                    <ActionButton onClick={() => openEditModal(item)} variant="secondary" size="sm" icon={<PencilIcon className="w-3 h-3"/>}><span className="sr-only">Modifier</span></ActionButton>
                    {!item.isAutoGenerated && (
                      <ActionButton onClick={() => handleDelete(item.id)} variant="danger" size="sm" icon={<TrashIcon className="w-3 h-3"/>}><span className="sr-only">Supprimer</span></ActionButton>
                    )}
                    {item.isAutoGenerated && (
                      <span className="text-xs text-gray-400 italic">Auto-généré</span>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
            <tfoot className="bg-gray-100 border-t-2 border-gray-300">
              <tr>
                <td colSpan={2} className="py-3 px-3 text-right text-sm font-bold text-gray-700">TOTAL</td>
                <td className="py-3 px-3 text-right text-sm font-bold text-gray-700">{totalEstimated.toFixed(2)} €</td>
                <td className="py-3 px-3 text-right text-sm font-bold text-gray-700">{totalActual > 0 || budgetItemsForEvent.some(i => i.actualCost !== undefined) ? totalActual.toFixed(2) + ' €' : '-'}</td>
                <td colSpan={3}></td>
              </tr>
            </tfoot>
          </table>
        </div>
      )}

      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title={isEditing ? "Modifier Ligne Budgétaire" : "Ajouter Ligne Budgétaire"}>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="categoryModal" className="block text-sm font-medium text-gray-700">Catégorie</label>
            <select 
              name="category" 
              id="categoryModal" 
              value={(currentItem as EventBudgetItem).category} 
              onChange={handleInputChange} 
              disabled={(currentItem as EventBudgetItem).isAutoGenerated}
              className={`mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${(currentItem as EventBudgetItem).isAutoGenerated ? 'bg-gray-100 cursor-not-allowed' : 'bg-white'}`}
            >
              {Object.values(BudgetItemCategory).map(cat => <option key={cat} value={cat}>{cat}</option>)}
            </select>
            {(currentItem as EventBudgetItem).isAutoGenerated && (
              <p className="mt-1 text-xs text-gray-500">Catégorie verrouillée pour les éléments auto-générés</p>
            )}
          </div>
          <div>
            <label htmlFor="descriptionModal" className="block text-sm font-medium text-gray-700">Description</label>
            <input 
              type="text" 
              name="description" 
              id="descriptionModal" 
              value={(currentItem as EventBudgetItem).description} 
              onChange={handleInputChange} 
              required 
              disabled={(currentItem as EventBudgetItem).isAutoGenerated}
              className={`mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${(currentItem as EventBudgetItem).isAutoGenerated ? 'bg-gray-100 cursor-not-allowed' : 'bg-white'}`} 
            />
            {(currentItem as EventBudgetItem).isAutoGenerated && (
              <p className="mt-1 text-xs text-gray-500">Description verrouillée pour les éléments auto-générés</p>
            )}
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="estimatedCostModal" className="block text-sm font-medium text-gray-700">Coût Estimé (€)</label>
              <input 
                type="number" 
                name="estimatedCost" 
                id="estimatedCostModal" 
                value={(currentItem as EventBudgetItem).estimatedCost} 
                onChange={handleInputChange} 
                step="0.01" 
                required 
                disabled={(currentItem as EventBudgetItem).isAutoGenerated}
                className={`mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${(currentItem as EventBudgetItem).isAutoGenerated ? 'bg-gray-100 cursor-not-allowed' : 'bg-white'}`} 
              />
              {(currentItem as EventBudgetItem).isAutoGenerated && (
                <p className="mt-1 text-xs text-gray-500">Coût estimé calculé automatiquement</p>
              )}
            </div>
            <div>
              <label htmlFor="actualCostModal" className="block text-sm font-medium text-gray-700">
                Coût Réel (€) (optionnel)
                {(currentItem as EventBudgetItem).isAutoGenerated && (
                  <span className="ml-2 text-xs text-blue-600 font-normal">💡 Saisissez le coût réel pour calculer l'écart</span>
                )}
              </label>
              <input 
                type="number" 
                name="actualCost" 
                id="actualCostModal" 
                value={(currentItem as EventBudgetItem).actualCost === undefined ? '' : (currentItem as EventBudgetItem).actualCost} 
                onChange={handleInputChange} 
                step="0.01" 
                placeholder="Laisser vide si N/A" 
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
              />
              {(currentItem as EventBudgetItem).isAutoGenerated && (
                <p className="mt-1 text-xs text-gray-500">
                  💡 Le coût réel vous permet de suivre les écarts par rapport à l'estimation automatique
                </p>
              )}
            </div>
          </div>
          <div>
            <label htmlFor="notesModal" className="block text-sm font-medium text-gray-700">Notes</label>
            <textarea name="notes" id="notesModal" value={(currentItem as EventBudgetItem).notes || ''} onChange={handleInputChange} rows={2} className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
          </div>
          <div>
            <label htmlFor="proofDocumentIdModal" className="block text-sm font-medium text-gray-700">Justificatif (Document)</label>
            <select
                name="proofDocumentId"
                id="proofDocumentIdModal"
                value={(currentItem as EventBudgetItem).proofDocumentId || ''}
                onChange={handleInputChange}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            >
                <option value="">Aucun justificatif lié</option>
                {documentsForEvent.map(doc => (
                    <option key={doc.id} value={doc.id}>{doc.name}</option>
                ))}
            </select>
          </div>
          <div className="flex justify-end space-x-3 pt-4">
            <ActionButton type="button" variant="secondary" onClick={() => setIsModalOpen(false)}>Annuler</ActionButton>
            <ActionButton type="submit">{isEditing ? "Sauvegarder" : "Ajouter"}</ActionButton>
          </div>
        </form>
      </Modal>
    </div>
  );
}
