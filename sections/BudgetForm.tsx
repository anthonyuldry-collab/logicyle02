import React, { useState } from 'react';
import { EventBudgetItem, BudgetItemCategory, RaceEvent } from '../types';

interface BudgetFormProps {
    item?: EventBudgetItem | null;
    raceEvents?: RaceEvent[];
    onSave: (item: EventBudgetItem) => void;
    onCancel: () => void;
}

const BudgetForm: React.FC<BudgetFormProps> = ({ item, raceEvents, onSave, onCancel }) => {
    const [formData, setFormData] = useState<Omit<EventBudgetItem, 'id'> & { eventId: string }>({
        eventId: item?.eventId || '',
        category: item?.category || BudgetItemCategory.FRAIS_DIVERS,
        description: item?.description || '',
        estimatedCost: item?.estimatedCost || 0,
        actualCost: item?.actualCost || undefined,
        notes: item?.notes || '',
        isAutoGenerated: item?.isAutoGenerated || false,
        sourceVehicleId: item?.sourceVehicleId || undefined,
        sourceStaffId: item?.sourceStaffId || undefined,
        proofDocumentId: item?.proofDocumentId || undefined,
    });

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        const budgetItem: EventBudgetItem = {
            id: item?.id || Date.now().toString(),
            eventId: formData.eventId,
            category: formData.category,
            description: formData.description,
            estimatedCost: formData.estimatedCost,
            actualCost: formData.actualCost,
            notes: formData.notes,
            isAutoGenerated: formData.isAutoGenerated,
            sourceVehicleId: formData.sourceVehicleId,
            sourceStaffId: formData.sourceStaffId,
            proofDocumentId: formData.proofDocumentId,
        };
        onSave(budgetItem);
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <div>
                <label className="block text-sm font-medium text-gray-700">Événement</label>
                <select
                    value={formData.eventId}
                    onChange={(e) => setFormData(prev => ({ ...prev, eventId: e.target.value }))}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    required
                >
                    <option value="">Sélectionner un événement</option>
                    {raceEvents?.map(event => (
                        <option key={event.id} value={event.id}>
                            {event.name} - {new Date(event.date).toLocaleDateString('fr-FR')}
                        </option>
                    ))}
                </select>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700">Catégorie</label>
                <select
                    value={formData.category}
                    onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value as BudgetItemCategory }))}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    required
                >
                    {Object.values(BudgetItemCategory).map(category => (
                        <option key={category} value={category}>{category}</option>
                    ))}
                </select>
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700">Description</label>
                <input
                    type="text"
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    required
                />
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700">Coût estimé (€)</label>
                <input
                    type="number"
                    value={formData.estimatedCost}
                    onChange={(e) => setFormData(prev => ({ ...prev, estimatedCost: parseFloat(e.target.value) || 0 }))}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    min="0"
                    step="0.01"
                    required
                />
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700">Coût réel (€)</label>
                <input
                    type="number"
                    value={formData.actualCost || ''}
                    onChange={(e) => setFormData(prev => ({ 
                        ...prev, 
                        actualCost: e.target.value ? parseFloat(e.target.value) : undefined 
                    }))}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                    min="0"
                    step="0.01"
                />
            </div>

            <div>
                <label className="block text-sm font-medium text-gray-700">Notes</label>
                <textarea
                    value={formData.notes}
                    onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}
                    rows={3}
                    className="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
            </div>

            <div className="flex justify-end space-x-3 pt-4">
                <button
                    type="button"
                    onClick={onCancel}
                    className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                    Annuler
                </button>
                <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-blue-700"
                >
                    {item ? 'Modifier' : 'Ajouter'}
                </button>
            </div>
        </form>
    );
};

export default BudgetForm;
